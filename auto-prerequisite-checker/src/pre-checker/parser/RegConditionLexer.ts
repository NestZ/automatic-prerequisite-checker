// Generated from pre-checker/RegCondition.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class RegConditionLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly T__4 = 5;
	public static readonly T__5 = 6;
	public static readonly T__6 = 7;
	public static readonly T__7 = 8;
	public static readonly T__8 = 9;
	public static readonly T__9 = 10;
	public static readonly T__10 = 11;
	public static readonly T__11 = 12;
	public static readonly T__12 = 13;
	public static readonly T__13 = 14;
	public static readonly CONSENT_OF = 15;
	public static readonly YEAR = 16;
	public static readonly COURSE_NUM = 17;
	public static readonly AND = 18;
	public static readonly OR = 19;
	public static readonly FIELD = 20;
	public static readonly WS = 21;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "CONSENT_OF", "YEAR", "COURSE_NUM", 
		"AND", "OR", "FIELD", "WS",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'('", "')'", "'none'", "'for'", "'not for'", "'students'", 
		"'students in'", "'group'", "'major'", "'sub-major'", "'concurrent to'", 
		"'year standing'", "'at least'", "'consent of the'", undefined, undefined, 
		undefined, "'and'", "'or'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, "CONSENT_OF", "YEAR", "COURSE_NUM", "AND", "OR", "FIELD", "WS",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(RegConditionLexer._LITERAL_NAMES, RegConditionLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return RegConditionLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(RegConditionLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "RegCondition.g4"; }

	// @Override
	public get ruleNames(): string[] { return RegConditionLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return RegConditionLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return RegConditionLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return RegConditionLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x17\u0110\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x03\x02\x03" +
		"\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x05\x03" +
		"\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03" +
		"\x06\x03\x06\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03" +
		"\x07\x03\x07\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03" +
		"\b\x03\b\x03\b\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\n\x03\n\x03\n\x03" +
		"\n\x03\n\x03\n\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03" +
		"\v\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03" +
		"\f\x03\f\x03\f\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03" +
		"\r\x03\r\x03\r\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03" +
		"\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03" +
		"\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03" +
		"\x0F\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03" +
		"\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03" +
		"\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03" +
		"\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03" +
		"\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03" +
		"\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x05\x10\xD6" +
		"\n\x10\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11" +
		"\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11" +
		"\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11" +
		"\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x05\x11\xF8\n\x11\x03" +
		"\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x13\x03\x13\x03" +
		"\x13\x03\x13\x03\x14\x03\x14\x03\x14\x03\x15\x06\x15\u0109\n\x15\r\x15" +
		"\x0E\x15\u010A\x03\x16\x03\x16\x03\x16\x03\x16\x02\x02\x02\x17\x03\x02" +
		"\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11" +
		"\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10" +
		"\x1F\x02\x11!\x02\x12#\x02\x13%\x02\x14\'\x02\x15)\x02\x16+\x02\x17\x03" +
		"\x02\x05\x03\x022;\x04\x02./c|\x04\x02\f\f\"\"\x02\u0119\x02\x03\x03\x02" +
		"\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02" +
		"\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02" +
		"\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02" +
		"\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02" +
		"\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02" +
		"\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02" +
		")\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x03-\x03\x02\x02\x02\x05/\x03\x02" +
		"\x02\x02\x071\x03\x02\x02\x02\t6\x03\x02\x02\x02\v:\x03\x02\x02\x02\r" +
		"B\x03\x02\x02\x02\x0FK\x03\x02\x02\x02\x11W\x03\x02\x02\x02\x13]\x03\x02" +
		"\x02\x02\x15c\x03\x02\x02\x02\x17m\x03\x02\x02\x02\x19{\x03\x02\x02\x02" +
		"\x1B\x89\x03\x02\x02\x02\x1D\x92\x03\x02\x02\x02\x1F\xD5\x03\x02\x02\x02" +
		"!\xF7\x03\x02\x02\x02#\xF9\x03\x02\x02\x02%\u0100\x03\x02\x02\x02\'\u0104" +
		"\x03\x02\x02\x02)\u0108\x03\x02\x02\x02+\u010C\x03\x02\x02\x02-.\x07*" +
		"\x02\x02.\x04\x03\x02\x02\x02/0\x07+\x02\x020\x06\x03\x02\x02\x0212\x07" +
		"p\x02\x0223\x07q\x02\x0234\x07p\x02\x0245\x07g\x02\x025\b\x03\x02\x02" +
		"\x0267\x07h\x02\x0278\x07q\x02\x0289\x07t\x02\x029\n\x03\x02\x02\x02:" +
		";\x07p\x02\x02;<\x07q\x02\x02<=\x07v\x02\x02=>\x07\"\x02\x02>?\x07h\x02" +
		"\x02?@\x07q\x02\x02@A\x07t\x02\x02A\f\x03\x02\x02\x02BC\x07u\x02\x02C" +
		"D\x07v\x02\x02DE\x07w\x02\x02EF\x07f\x02\x02FG\x07g\x02\x02GH\x07p\x02" +
		"\x02HI\x07v\x02\x02IJ\x07u\x02\x02J\x0E\x03\x02\x02\x02KL\x07u\x02\x02" +
		"LM\x07v\x02\x02MN\x07w\x02\x02NO\x07f\x02\x02OP\x07g\x02\x02PQ\x07p\x02" +
		"\x02QR\x07v\x02\x02RS\x07u\x02\x02ST\x07\"\x02\x02TU\x07k\x02\x02UV\x07" +
		"p\x02\x02V\x10\x03\x02\x02\x02WX\x07i\x02\x02XY\x07t\x02\x02YZ\x07q\x02" +
		"\x02Z[\x07w\x02\x02[\\\x07r\x02\x02\\\x12\x03\x02\x02\x02]^\x07o\x02\x02" +
		"^_\x07c\x02\x02_`\x07l\x02\x02`a\x07q\x02\x02ab\x07t\x02\x02b\x14\x03" +
		"\x02\x02\x02cd\x07u\x02\x02de\x07w\x02\x02ef\x07d\x02\x02fg\x07/\x02\x02" +
		"gh\x07o\x02\x02hi\x07c\x02\x02ij\x07l\x02\x02jk\x07q\x02\x02kl\x07t\x02" +
		"\x02l\x16\x03\x02\x02\x02mn\x07e\x02\x02no\x07q\x02\x02op\x07p\x02\x02" +
		"pq\x07e\x02\x02qr\x07w\x02\x02rs\x07t\x02\x02st\x07t\x02\x02tu\x07g\x02" +
		"\x02uv\x07p\x02\x02vw\x07v\x02\x02wx\x07\"\x02\x02xy\x07v\x02\x02yz\x07" +
		"q\x02\x02z\x18\x03\x02\x02\x02{|\x07{\x02\x02|}\x07g\x02\x02}~\x07c\x02" +
		"\x02~\x7F\x07t\x02\x02\x7F\x80\x07\"\x02\x02\x80\x81\x07u\x02\x02\x81" +
		"\x82\x07v\x02\x02\x82\x83\x07c\x02\x02\x83\x84\x07p\x02\x02\x84\x85\x07" +
		"f\x02\x02\x85\x86\x07k\x02\x02\x86\x87\x07p\x02\x02\x87\x88\x07i\x02\x02" +
		"\x88\x1A\x03\x02\x02\x02\x89\x8A\x07c\x02\x02\x8A\x8B\x07v\x02\x02\x8B" +
		"\x8C\x07\"\x02\x02\x8C\x8D\x07n\x02\x02\x8D\x8E\x07g\x02\x02\x8E\x8F\x07" +
		"c\x02\x02\x8F\x90\x07u\x02\x02\x90\x91\x07v\x02\x02\x91\x1C\x03\x02\x02" +
		"\x02\x92\x93\x07e\x02\x02\x93\x94\x07q\x02\x02\x94\x95\x07p\x02\x02\x95" +
		"\x96\x07u\x02\x02\x96\x97\x07g\x02\x02\x97\x98\x07p\x02\x02\x98\x99\x07" +
		"v\x02\x02\x99\x9A\x07\"\x02\x02\x9A\x9B\x07q\x02\x02\x9B\x9C\x07h\x02" +
		"\x02\x9C\x9D\x07\"\x02\x02\x9D\x9E\x07v\x02\x02\x9E\x9F\x07j\x02\x02\x9F" +
		"\xA0\x07g\x02\x02\xA0\x1E\x03\x02\x02\x02\xA1\xA2\x07f\x02\x02\xA2\xA3" +
		"\x07g\x02\x02\xA3\xA4\x07r\x02\x02\xA4\xA5\x07c\x02\x02\xA5\xA6\x07t\x02" +
		"\x02\xA6\xA7\x07v\x02\x02\xA7\xA8\x07o\x02\x02\xA8\xA9\x07g\x02\x02\xA9" +
		"\xAA\x07p\x02\x02\xAA\xD6\x07v\x02\x02\xAB\xAC\x07k\x02\x02\xAC\xAD\x07" +
		"p\x02\x02\xAD\xAE\x07u\x02\x02\xAE\xAF\x07v\x02\x02\xAF\xB0\x07t\x02\x02" +
		"\xB0\xB1\x07w\x02\x02\xB1\xB2\x07e\x02\x02\xB2\xB3\x07v\x02\x02\xB3\xB4" +
		"\x07q\x02\x02\xB4\xD6\x07t\x02\x02\xB5\xB6\x07h\x02\x02\xB6\xB7\x07c\x02" +
		"\x02\xB7\xB8\x07e\x02\x02\xB8\xB9\x07w\x02\x02\xB9\xBA\x07n\x02\x02\xBA" +
		"\xBB\x07v\x02\x02\xBB\xD6\x07{\x02\x02\xBC\xBD\x07c\x02\x02\xBD\xBE\x07" +
		"f\x02\x02\xBE\xBF\x07x\x02\x02\xBF\xC0\x07k\x02\x02\xC0\xC1\x07u\x02\x02" +
		"\xC1\xC2\x07q\x02\x02\xC2\xD6\x07t\x02\x02\xC3\xC4\x07c\x02\x02\xC4\xC5" +
		"\x07e\x02\x02\xC5\xC6\x07c\x02\x02\xC6\xC7\x07f\x02\x02\xC7\xC8\x07g\x02" +
		"\x02\xC8\xC9\x07o\x02\x02\xC9\xCA\x07k\x02\x02\xCA\xCB\x07e\x02\x02\xCB" +
		"\xCC\x07\"\x02\x02\xCC\xCD\x07e\x02\x02\xCD\xCE\x07q\x02\x02\xCE\xCF\x07" +
		"o\x02\x02\xCF\xD0\x07o\x02\x02\xD0\xD1\x07k\x02\x02\xD1\xD2\x07v\x02\x02" +
		"\xD2\xD3\x07v\x02\x02\xD3\xD4\x07g\x02\x02\xD4\xD6\x07g\x02\x02\xD5\xA1" +
		"\x03\x02\x02\x02\xD5\xAB\x03\x02\x02\x02\xD5\xB5\x03\x02\x02\x02\xD5\xBC" +
		"\x03\x02\x02\x02\xD5\xC3\x03\x02\x02\x02\xD6 \x03\x02\x02\x02\xD7\xD8" +
		"\x07h\x02\x02\xD8\xD9\x07k\x02\x02\xD9\xDA\x07t\x02\x02\xDA\xDB\x07u\x02" +
		"\x02\xDB\xF8\x07v\x02\x02\xDC\xDD\x07u\x02\x02\xDD\xDE\x07g\x02\x02\xDE" +
		"\xDF\x07e\x02\x02\xDF\xE0\x07q\x02\x02\xE0\xE1\x07p\x02\x02\xE1\xF8\x07" +
		"f\x02\x02\xE2\xE3\x07v\x02\x02\xE3\xE4\x07j\x02\x02\xE4\xE5\x07k\x02\x02" +
		"\xE5\xE6\x07t\x02\x02\xE6\xF8\x07f\x02\x02\xE7\xE8\x07h\x02\x02\xE8\xE9" +
		"\x07q\x02\x02\xE9\xEA\x07w\x02\x02\xEA\xEB\x07t\x02\x02\xEB\xEC\x07v\x02" +
		"\x02\xEC\xF8\x07j\x02\x02\xED\xEE\x07h\x02\x02\xEE\xEF\x07k\x02\x02\xEF" +
		"\xF0\x07h\x02\x02\xF0\xF1\x07v\x02\x02\xF1\xF8\x07j\x02\x02\xF2\xF3\x07" +
		"u\x02\x02\xF3\xF4\x07k\x02\x02\xF4\xF5\x07z\x02\x02\xF5\xF6\x07v\x02\x02" +
		"\xF6\xF8\x07j\x02\x02\xF7\xD7\x03\x02\x02\x02\xF7\xDC\x03\x02\x02\x02" +
		"\xF7\xE2\x03\x02\x02\x02\xF7\xE7\x03\x02\x02\x02\xF7\xED\x03\x02\x02\x02" +
		"\xF7\xF2\x03\x02\x02\x02\xF8\"\x03\x02\x02\x02\xF9\xFA\t\x02\x02\x02\xFA" +
		"\xFB\t\x02\x02\x02\xFB\xFC\t\x02\x02\x02\xFC\xFD\t\x02\x02\x02\xFD\xFE" +
		"\t\x02\x02\x02\xFE\xFF\t\x02\x02\x02\xFF$\x03\x02\x02\x02\u0100\u0101" +
		"\x07c\x02\x02\u0101\u0102\x07p\x02\x02\u0102\u0103\x07f\x02\x02\u0103" +
		"&\x03\x02\x02\x02\u0104\u0105\x07q\x02\x02\u0105\u0106\x07t\x02\x02\u0106" +
		"(\x03\x02\x02\x02\u0107\u0109\t\x03\x02\x02\u0108\u0107\x03\x02\x02\x02" +
		"\u0109\u010A\x03\x02\x02\x02\u010A\u0108\x03\x02\x02\x02\u010A\u010B\x03" +
		"\x02\x02\x02\u010B*\x03\x02\x02\x02\u010C\u010D\t\x04\x02\x02\u010D\u010E" +
		"\x03\x02\x02\x02\u010E\u010F\b\x16\x02\x02\u010F,\x03\x02\x02\x02\x06" +
		"\x02\xD5\xF7\u010A\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!RegConditionLexer.__ATN) {
			RegConditionLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(RegConditionLexer._serializedATN));
		}

		return RegConditionLexer.__ATN;
	}

}

